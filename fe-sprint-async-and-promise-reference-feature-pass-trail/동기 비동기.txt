학습 목표
====================================================
-어떤 경우에 중첩된 콜백(callback)이 발생하는지 이해할 수 있다.
==> 병렬적으로 테스크를 비동기 처리를 하고자 할 때, 내가 원하는 조건에 맞을 때 실행시키기 위해서 콜백을 사용함.
===> 비동기 함수 전달 패턴은, 콜백함수, 이벤트 등록함수로 실현 가능 
====>우리는 비동기 덕분에 로딩을 하는 도중에 다른 작업들을 수행할 수 있다.
======>중요: 콜백은 함수 자체를 연결짓는 거지, 함수 실행을 연결하는 것이 아니다. 
=============================================================
-중첩된 콜백(callback)의 단점, Promise의 장점을 이해할 수 있다.
====> 콜백의 단점 => 콜백의 단점은, 만약 에러가 날 시에 콜백의 중첩이 많아 짐에 따라, 중첩이 쌓임에 따라, 일일히 에러를 입력해야된다는 단점이 있다.
=====> 그래서 나온게 프로미스인데, 프로미스는 하나의 클래스 같은 것. new Promise() 메서드를 호출할 때 콜백 함수를 선언할 수 있고, 콜백 함수의 인자로 resolve와 reject 2개의 매개변수를 갖고 있고, Resolv와 reject명령어를 통해서 error을 핸들링할 수 있다.

========>then() 메서드를 호출하고 나면 새로운 프로미스 객체가 반환됩니다. 
================================================================
-async/await 키워드에 대해 이해하고, 작동 원리를 이해할 수 있다.
===========>기존의 비동기 처리 방식인 콜백 함수와 프로미스의 단점을 보완

=>함수의 앞에 async 라는 예약어를 붙입니다. 그러고 나서 함수의 내부 로직 중 HTTP 통신을 하는 비동기 처리 코드 앞에 await를 붙입니다. 여기서 주의하셔야 할 점은 비동기 처리 메서드가 꼭 프로미스 객체를 반환해야 await가 의도한 대로 동작


======================================================
Node.js 내장 모듈을 사용할 수 있다.
서드 파티 모듈 (3rd-party module)을 활용할 수 있다.
Node.js 공식 문서를 활용하여 fs.readFile을 이용할 수 있다.
